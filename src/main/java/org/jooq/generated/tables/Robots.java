/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.Bot;
import org.jooq.generated.Keys;
import org.jooq.generated.tables.records.RobotsRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Robots extends TableImpl<RobotsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>bot.robots</code>
     */
    public static final Robots ROBOTS = new Robots();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RobotsRecord> getRecordType() {
        return RobotsRecord.class;
    }

    /**
     * The column <code>bot.robots.id</code>.
     */
    public final TableField<RobotsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>bot.robots.name</code>.
     */
    public final TableField<RobotsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(25).nullable(false), this, "");

    /**
     * The column <code>bot.robots.created_at</code>.
     */
    public final TableField<RobotsRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    private Robots(Name alias, Table<RobotsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Robots(Name alias, Table<RobotsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>bot.robots</code> table reference
     */
    public Robots(String alias) {
        this(DSL.name(alias), ROBOTS);
    }

    /**
     * Create an aliased <code>bot.robots</code> table reference
     */
    public Robots(Name alias) {
        this(alias, ROBOTS);
    }

    /**
     * Create a <code>bot.robots</code> table reference
     */
    public Robots() {
        this(DSL.name("robots"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Bot.BOT;
    }

    @Override
    public Identity<RobotsRecord, Integer> getIdentity() {
        return (Identity<RobotsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<RobotsRecord> getPrimaryKey() {
        return Keys.ROBOTS_PKEY;
    }

    @Override
    public List<UniqueKey<RobotsRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.ROBOTS_NAME_KEY);
    }

    @Override
    public Robots as(String alias) {
        return new Robots(DSL.name(alias), this);
    }

    @Override
    public Robots as(Name alias) {
        return new Robots(alias, this);
    }

    @Override
    public Robots as(Table<?> alias) {
        return new Robots(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Robots rename(String name) {
        return new Robots(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Robots rename(Name name) {
        return new Robots(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Robots rename(Table<?> name) {
        return new Robots(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Robots where(Condition condition) {
        return new Robots(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Robots where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Robots where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Robots where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Robots where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Robots where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Robots where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Robots where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Robots whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Robots whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
